generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================================
// CORE USER SYSTEM
// ================================

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  username    String?   @unique
  name        String
  avatar      String?
  bio         String?
  phone       String?
  country     String?
  isActive    Boolean   @default(true)
  isVerified  Boolean   @default(false)
  role        UserRole  @default(TATTOO_LOVER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Role-specific profiles
  artistProfile ArtistProfile?
  adminProfile  AdminProfile?

  // Social features
  posts       Post[]
  postLikes   PostLike[]
  comments    Comment[]
  collections Collection[]
  followers   Follow[]     @relation("UserFollowers")
  following   Follow[]     @relation("UserFollowing")

  // Magazine features
  magazines        Magazine[]
  magazineLikes    MagazineLike[]
  magazineComments MagazineComment[]
  magazineViews    MagazineView[]

  // Messaging system
  sentMessages     Message[]           @relation("MessageSender")
  receivedMessages Message[]           @relation("MessageReceiver")
  sentRequests     ConnectionRequest[] @relation("RequestSender")
  receivedRequests ConnectionRequest[] @relation("RequestReceiver")
  conversations    ConversationUser[]

  // Studio memberships
  studioMemberships StudioMember[]

  // Subscriptions (for artists)
  subscriptions UserSubscription[]

  // Notifications
  sentNotifications     Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model ArtistProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  certificateUrl    String?
  portfolioComplete Boolean  @default(false) // True when 4+ images uploaded
  yearsExperience   Int?
  specialties       String[] // Array of specialties
  location          String?
  city              String?
  country           String?
  instagram         String?
  website           String?
  isStudioOwner     Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  services          ArtistService[]
  ownedStudios      Studio[]         @relation("StudioOwner")
  studioMemberships StudioMember[]

  @@index([userId])
  @@index([portfolioComplete])
  @@index([city])
  @@map("artist_profiles")
}

model AdminProfile {
  id        String     @id @default(cuid())
  userId    String     @unique
  level     AdminLevel @default(ADMIN)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("admin_profiles")
}

// ================================
// SUBSCRIPTION SYSTEM
// ================================

model SubscriptionPlan {
  id               String   @id @default(cuid())
  name             String   @unique // "Basic", "Studio", "Premium"
  description      String
  features         Json // Flexible features object
  monthlyPrice     Float
  yearlyPrice      Float
  maxPosts         Int? // null = unlimited
  maxCollections   Int?
  maxStudioMembers Int?
  canCreateStudio  Boolean  @default(false)
  canUploadVideos  Boolean  @default(false)
  priority         Int      @default(0) // For ordering plans
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  subscriptions UserSubscription[]

  @@index([name])
  @@index([isActive])
  @@map("subscription_plans")
}

model UserSubscription {
  id              String             @id @default(cuid())
  userId          String
  planId          String
  status          SubscriptionStatus @default(ACTIVE)
  billingCycle    BillingCycle       @default(MONTHLY)
  startDate       DateTime           @default(now())
  endDate         DateTime
  isAdminAssigned Boolean            @default(false) // True if assigned by admin
  autoRenew       Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relations
  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([endDate])
  @@map("user_subscriptions")
}

// ================================
// STUDIO SYSTEM
// ================================

model Studio {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  banner      String?
  address     String
  city        String
  country     String
  phone       String?
  email       String?
  website     String?
  instagram   String?
  isActive    Boolean  @default(true)
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner   ArtistProfile  @relation("StudioOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members StudioMember[]
  photos  StudioPhoto[]

  @@index([ownerId])
  @@index([slug])
  @@index([city])
  @@index([isActive])
  @@map("studios")
}

model StudioMember {
  id       String     @id @default(cuid())
  studioId String
  userId   String
  artistId String
  role     StudioRole @default(MEMBER)
  joinedAt DateTime   @default(now())
  isActive Boolean    @default(true)

  // Relations
  studio Studio        @relation(fields: [studioId], references: [id], onDelete: Cascade)
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  artist ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([studioId, userId])
  @@index([studioId])
  @@index([userId])
  @@map("studio_members")
}

model StudioPhoto {
  id        String   @id @default(cuid())
  studioId  String
  imageUrl  String
  caption   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  studio Studio @relation(fields: [studioId], references: [id], onDelete: Cascade)

  @@index([studioId])
  @@map("studio_photos")
}

// ================================
// CONTENT SYSTEM
// ================================

model Post {
  id            String    @id @default(cuid())
  authorId      String
  caption       String?
  mediaType     MediaType @default(IMAGE)
  mediaUrl      String
  thumbnailUrl  String? // For videos
  styleId       String?
  isActive      Boolean   @default(true)
  likesCount    Int       @default(0)
  commentsCount Int       @default(0)
  showInFeed    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  author      User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  style       TattooStyle?     @relation(fields: [styleId], references: [id])
  likes       PostLike[]
  comments    Comment[]
  collections CollectionPost[]

  @@index([authorId])
  @@index([styleId])
  @@index([createdAt])
  @@index([likesCount])
  @@map("posts")
}

model Magazine {
  id            String      @id @default(cuid())
  title         String
  content       String? // Rich text content or description
  excerpt       String? // Short summary for previews
  coverImage    String // Main cover image
  mediaType     MediaType   @default(IMAGE)
  mediaUrl      String? // Additional media (video, gallery, etc.)
  thumbnailUrl  String? // For videos
  styleId       String?
  tags          String[] // Array of tags for categorization
  isPublished   Boolean     @default(false)
  isFeatured    Boolean     @default(false) // Featured magazines appear prominently
  publishedAt   DateTime?
  scheduledAt   DateTime? // For scheduled publishing
  viewsCount    Int         @default(0)
  likesCount    Int         @default(0)
  commentsCount Int         @default(0)
  readTime      Int? // Estimated read time in minutes
  authorId      String // Admin who created it
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  author   User                 @relation(fields: [authorId], references: [id], onDelete: Cascade)
  style    TattooStyle?         @relation(fields: [styleId], references: [id])
  likes    MagazineLike[]
  comments MagazineComment[]
  views    MagazineView[]

  @@index([authorId])
  @@index([styleId])
  @@index([isPublished])
  @@index([isFeatured])
  @@index([publishedAt])
  @@index([viewsCount])
  @@index([likesCount])
  @@map("magazines")
}

model MagazineLike {
  id         String   @id @default(cuid())
  magazineId String
  userId     String
  createdAt  DateTime @default(now())

  magazine Magazine @relation(fields: [magazineId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([magazineId, userId])
  @@index([magazineId])
  @@index([userId])
  @@map("magazine_likes")
}

model MagazineComment {
  id         String   @id @default(cuid())
  magazineId String
  authorId   String
  content    String
  parentId   String? // For nested comments
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  magazine Magazine         @relation(fields: [magazineId], references: [id], onDelete: Cascade)
  author   User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent   MagazineComment? @relation("MagazineCommentReplies", fields: [parentId], references: [id])
  replies  MagazineComment[] @relation("MagazineCommentReplies")

  @@index([magazineId])
  @@index([authorId])
  @@index([parentId])
  @@map("magazine_comments")
}

model MagazineView {
  id         String   @id @default(cuid())
  magazineId String
  userId     String? // Null for anonymous views
  ipAddress  String? // For anonymous tracking
  userAgent  String? // Browser/device info
  createdAt  DateTime @default(now())

  magazine Magazine @relation(fields: [magazineId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([magazineId])
  @@index([userId])
  @@index([createdAt])
  @@map("magazine_views")
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@map("post_likes")
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  content   String
  parentId  String? // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@map("comments")
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  posts CollectionPost[]

  @@index([ownerId])
  @@index([isPrivate])
  @@map("collections")
}

model CollectionPost {
  id           String   @id @default(cuid())
  collectionId String
  postId       String
  addedAt      DateTime @default(now())

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([collectionId, postId])
  @@index([collectionId])
  @@index([postId])
  @@map("collection_posts")
}

// ================================
// MESSAGING SYSTEM
// ================================

model ConnectionRequest {
  id         String        @id @default(cuid())
  senderId   String
  receiverId String
  message    String?
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  sender   User @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("RequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
  @@index([status])
  @@map("connection_requests")
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants ConversationUser[]
  messages     Message[]

  @@map("conversations")
}

model ConversationUser {
  id             String    @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime  @default(now())
  lastReadAt     DateTime?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
  @@map("conversation_users")
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderId       String
  receiverId     String
  content        String
  messageType    MessageType @default(TEXT)
  mediaUrl       String?
  isRead         Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User         @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@map("messages")
}

// ================================
// SERVICES & STYLES SYSTEM
// ================================

model TattooStyle {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts     Post[]
  services  Service[]
  magazines Magazine[]

  @@index([name])
  @@index([isActive])
  @@map("tattoo_styles")
}

model Service {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  category    String
  styleId     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  style   TattooStyle?    @relation(fields: [styleId], references: [id])
  artists ArtistService[]

  @@index([name])
  @@index([category])
  @@index([styleId])
  @@index([isActive])
  @@map("services")
}

model ArtistService {
  id        String   @id @default(cuid())
  artistId  String
  serviceId String
  price     Float?
  duration  Int? // in minutes
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  artist  ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)
  service Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([artistId, serviceId])
  @@index([artistId])
  @@index([serviceId])
  @@map("artist_services")
}


// ================================
// SOCIAL FEATURES
// ================================

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

// ================================
// NOTIFICATIONS
// ================================

model Notification {
  id         String           @id @default(cuid())
  senderId   String?
  receiverId String
  type       NotificationType
  title      String
  content    String
  data       Json? // Additional data for the notification
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())

  sender   User? @relation("NotificationSender", fields: [senderId], references: [id])
  receiver User  @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([receiverId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// ================================
// ENUMS
// ================================

enum UserRole {
  ADMIN
  ARTIST
  TATTOO_LOVER
}

enum AdminLevel {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  SUSPENDED
}

enum BillingCycle {
  MONTHLY
  YEARLY
  ADMIN_ASSIGNED
}

enum StudioRole {
  OWNER
  MANAGER
  MEMBER
}

enum MediaType {
  IMAGE
  VIDEO
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
  MESSAGE
  CONNECTION_REQUEST
  SUBSCRIPTION_EXPIRY
  STUDIO_INVITATION
  SYSTEM
}
