generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String               @id @default(uuid())
  email                   String               @unique
  username                String               @unique
  firstName               String?
  lastName                String?
  avatar                  String?
  bio                     String?
  phone                   String?
  instagram               String?
  tiktok                  String?
  isActive                Boolean              @default(true)
  isVerified              Boolean              @default(false)
  isPublic                Boolean              @default(true)
  role                    UserRole             @default(TATTOO_LOVER)
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  lastLoginAt             DateTime?
  adminProfile            AdminProfile?
  artistProfile           ArtistProfile?
  collections             Collection[]
  comments                Comment[]
  receivedPrivateRequests PrivateRequest[]     @relation("PrivateRequestReceiver")
  sentPrivateRequests     PrivateRequest[]     @relation("PrivateRequestSender")
  conversations           ConversationUser[]
  followers               Follow[]             @relation("UserFollowers")
  following               Follow[]             @relation("UserFollowing")
  magazineComments        MagazineComment[]
  likedMagazines          MagazineLike[]
  magazineViews           MagazineView[]
  magazines               Magazine[]
  receivedMessages        Message[]            @relation("MessageReceiver")
  sentMessages            Message[]            @relation("MessageSender")
  receivedNotifications   Notification[]       @relation("NotificationReceiver")
  sentNotifications       Notification[]       @relation("NotificationSender")
  likedPosts              PostLike[]
  posts                   Post[]
  studioMemberships       StudioMember[]
  favoriteStyles          UserFavoriteStyle[]
  assignedSubscriptions   UserSubscription[]   @relation("AdminAssignedSubscriptions")
  subscriptions           UserSubscription[]
  conversationsAsArtist   Conversation[]       @relation("ConversationArtist")
  conversationsAsLover    Conversation[]       @relation("ConversationLover")
  messageReceipts         MessageReceipt[]
  createdIntakes          ConversationIntake[]
  reportsSubmitted        Report[]             @relation("UserReports")
  reportsReceived         Report[]             @relation("UserReported")
  reviewedReports         Report[]             @relation("AdminReviews")
  blocking                BlockedUser[]        @relation("UserBlocking")
  blockedBy               BlockedUser[]        @relation("UserBlocked")
  locations               UserLocation[]

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model ArtistProfile {
  id                    String                @id @default(uuid())
  userId                String                @unique
  certificateUrl        String?
  portfolioComplete     Boolean               @default(false)
  yearsExperience       Int?
  specialties           String[]
  businessName          String?
  studioAddress         String?
  instagram             String?
  website               String?
  phone                 String?
  workArrangement       WorkArrangement?
  artistType            ArtistType?
  isStudioOwner         Boolean               @default(false)
  minimumPrice          Float?
  hourlyRate            Float?
  mainStyleId           String?
  acceptPrivateRequests Boolean               @default(true)
  rejectionMessage      String?
  bannerType            BannerType?           @default(FOUR_IMAGES)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  bodyParts             ArtistBodyPart[]
  favoriteStyles        ArtistFavoriteStyle[]
  mainStyle             TattooStyle?          @relation("ArtistMainStyle", fields: [mainStyleId], references: [id])
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  services              ArtistService[]
  portfolioProjects     PortfolioProject[]
  studioMemberships     StudioMember[]
  ownedStudios          Studio[]              @relation("StudioOwner")
  bannerMedia           ArtistBannerMedia[]

  @@index([userId])
  @@index([portfolioComplete])
  @@index([workArrangement])
  @@index([artistType])
  @@index([mainStyleId])
  @@index([yearsExperience])
  @@index([minimumPrice])
  @@index([hourlyRate])
  @@map("artist_profiles")
}

model AdminProfile {
  id        String     @id @default(uuid())
  userId    String     @unique
  level     AdminLevel @default(ADMIN)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("admin_profiles")
}

model SubscriptionPlan {
  id               String             @id @default(uuid())
  name             String             @unique
  description      String
  features         Json
  monthlyPrice     Float?
  yearlyPrice      Float?
  maxPosts         Int?
  maxCollections   Int?
  maxStudioMembers Int?
  canCreateStudio  Boolean            @default(true)
  canUploadVideos  Boolean            @default(false)
  priority         Int                @default(0)
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  type             PlanType           @unique @default(PREMIUM)
  isDefault        Boolean            @default(false)
  freeTrialDays    Int?
  subscriptions    UserSubscription[]

  @@index([name])
  @@index([type])
  @@index([isActive])
  @@map("subscription_plans")
}

model UserSubscription {
  id              String             @id @default(uuid())
  userId          String
  planId          String
  status          SubscriptionStatus @default(ACTIVE)
  billingCycle    BillingCycle       @default(MONTHLY)
  startDate       DateTime           @default(now())
  endDate         DateTime?
  isAdminAssigned Boolean            @default(false)
  autoRenew       Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  isFree          Boolean            @default(false)
  isTrial         Boolean            @default(true)
  adminNotes      String?
  assignedBy      String?
  assignedByUser  User?              @relation("AdminAssignedSubscriptions", fields: [assignedBy], references: [id])
  plan            SubscriptionPlan   @relation(fields: [planId], references: [id])
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([endDate])
  @@index([isAdminAssigned])
  @@index([isFree])
  @@index([userId, status])
  @@index([userId, endDate])
  @@index([status, endDate])
  @@map("user_subscriptions")
}

model Studio {
  id          String              @id @default(uuid())
  name        String
  slug        String              @unique
  description String?
  logo        String?
  address     String?
  phone       String?
  email       String?
  website     String?
  instagram   String?
  tiktok      String?
  isActive    Boolean             @default(true)
  ownerId     String
  bannerType  BannerType?         @default(FOUR_IMAGES)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  isCompleted Boolean             @default(false)
  members     StudioMember[]
  photos      StudioPhoto[]
  styles      StudioStyle[]
  services    StudioService[]
  faqs        StudioFAQ[]
  bannerMedia StudioBannerMedia[]
  locations   StudioLocation[]
  owner       ArtistProfile       @relation("StudioOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([slug])
  @@index([isActive])
  @@index([isCompleted])
  @@map("studios")
}

model StudioMember {
  id       String        @id @default(uuid())
  studioId String
  userId   String
  artistId String
  role     StudioRole    @default(MEMBER)
  joinedAt DateTime      @default(now())
  isActive Boolean       @default(true)
  artist   ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)
  studio   Studio        @relation(fields: [studioId], references: [id], onDelete: Cascade)
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([studioId, userId])
  @@index([studioId])
  @@index([userId])
  @@map("studio_members")
}

model StudioPhoto {
  id        String   @id @default(uuid())
  studioId  String
  imageUrl  String
  caption   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  studio    Studio   @relation(fields: [studioId], references: [id], onDelete: Cascade)

  @@index([studioId])
  @@map("studio_photos")
}

model StudioStyle {
  id        String      @id @default(dbgenerated("uuid_generate_v4()"))
  studioId  String
  styleId   String
  order     Int         @default(0)
  createdAt DateTime    @default(now())
  studio    Studio      @relation(fields: [studioId], references: [id], onDelete: Cascade)
  style     TattooStyle @relation(fields: [styleId], references: [id], onDelete: Cascade)

  @@unique([studioId, styleId])
  @@index([studioId])
  @@index([styleId])
  @@index([studioId, styleId])
  @@map("studio_styles")
}

model StudioService {
  id        String   @id @default(dbgenerated("uuid_generate_v4()"))
  studioId  String
  serviceId String
  price     Float?
  duration  Int?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  studio    Studio   @relation(fields: [studioId], references: [id], onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([studioId, serviceId])
  @@index([studioId])
  @@index([serviceId])
  @@index([studioId, serviceId])
  @@index([studioId, isActive])
  @@map("studio_services")
}

model StudioFAQ {
  id        String   @id @default(uuid())
  studioId  String
  question  String
  answer    String
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studio   @relation(fields: [studioId], references: [id], onDelete: Cascade)

  @@index([studioId])
  @@index([order])
  @@map("studio_faqs")
}

model StudioBannerMedia {
  id         String     @id @default(dbgenerated("uuid_generate_v4()"))
  studioId   String
  mediaType  MediaType  @default(IMAGE)
  bannerType BannerType @default(FOUR_IMAGES)
  mediaUrl   String
  order      Int        @default(0)
  createdAt  DateTime   @default(now())
  studio     Studio     @relation(fields: [studioId], references: [id], onDelete: Cascade)

  @@index([studioId])
  @@index([order])
  @@map("studio_banner_media")
}

model Post {
  id            String            @id @default(uuid())
  authorId      String
  caption       String?
  thumbnailUrl  String?
  styleId       String?
  projectId     String?
  isActive      Boolean           @default(true)
  likesCount    Int               @default(0)
  commentsCount Int               @default(0)
  showInFeed    Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  media         PostMedia[]
  collections   CollectionPost[]
  comments      Comment[]
  likes         PostLike[]
  author        User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  style         TattooStyle?      @relation(fields: [styleId], references: [id])
  project       PortfolioProject? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@index([authorId])
  @@index([styleId])
  @@index([createdAt])
  @@index([likesCount])
  @@map("posts")
}

model Magazine {
  id            String            @id @default(uuid())
  title         String
  content       String?
  excerpt       String?
  coverImage    String
  mediaType     MediaType         @default(IMAGE)
  mediaUrl      String?
  thumbnailUrl  String?
  styleId       String?
  tags          String[]
  isPublished   Boolean           @default(false)
  isFeatured    Boolean           @default(false)
  publishedAt   DateTime?
  scheduledAt   DateTime?
  viewsCount    Int               @default(0)
  likesCount    Int               @default(0)
  commentsCount Int               @default(0)
  readTime      Int?
  authorId      String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  comments      MagazineComment[]
  likes         MagazineLike[]
  views         MagazineView[]
  author        User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  style         TattooStyle?      @relation(fields: [styleId], references: [id])

  @@index([authorId])
  @@index([styleId])
  @@index([isPublished])
  @@index([isFeatured])
  @@index([publishedAt])
  @@index([viewsCount])
  @@index([likesCount])
  @@map("magazines")
}

model MagazineLike {
  id         String   @id @default(uuid())
  magazineId String
  userId     String
  createdAt  DateTime @default(now())
  magazine   Magazine @relation(fields: [magazineId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([magazineId, userId])
  @@index([magazineId])
  @@index([userId])
  @@map("magazine_likes")
}

model MagazineComment {
  id         String            @id @default(uuid())
  magazineId String
  authorId   String
  content    String
  parentId   String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  author     User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  magazine   Magazine          @relation(fields: [magazineId], references: [id], onDelete: Cascade)
  parent     MagazineComment?  @relation("MagazineCommentReplies", fields: [parentId], references: [id])
  replies    MagazineComment[] @relation("MagazineCommentReplies")

  @@index([magazineId])
  @@index([authorId])
  @@index([parentId])
  @@map("magazine_comments")
}

model MagazineView {
  id         String   @id @default(uuid())
  magazineId String
  userId     String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  magazine   Magazine @relation(fields: [magazineId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])

  @@index([magazineId])
  @@index([userId])
  @@index([createdAt])
  @@map("magazine_views")
}

model PostLike {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@map("post_likes")
}

model Comment {
  id        String    @id @default(uuid())
  postId    String
  authorId  String
  content   String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@map("comments")
}

model Collection {
  id                    String           @id @default(uuid())
  name                  String
  description           String?
  ownerId               String
  isPrivate             Boolean          @default(false)
  isPortfolioCollection Boolean          @default(false)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  posts                 CollectionPost[]
  owner                 User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([isPrivate])
  @@index([isPortfolioCollection])
  @@map("collections")
}

model CollectionPost {
  id           String     @id @default(uuid())
  collectionId String
  postId       String
  addedAt      DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  post         Post       @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([collectionId, postId])
  @@index([collectionId])
  @@index([postId])
  @@map("collection_posts")
}

model PrivateRequest {
  id         String        @id @default(uuid())
  senderId   String
  receiverId String
  message    String?
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  receiver   User          @relation("PrivateRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User          @relation("PrivateRequestSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
  @@index([status])
  @@map("private_requests")
}

model Conversation {
  id            String              @id @default(uuid())
  artistId      String?
  loverId       String?
  status        ConversationStatus  @default(REQUESTED)
  requestedBy   String?
  requestedAt   DateTime            @default(now())
  acceptedAt    DateTime?
  rejectedAt    DateTime?
  closedAt      DateTime?
  lastMessageAt DateTime?
  lastMessageId String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  participants  ConversationUser[]
  messages      Message[]
  lastMessage   Message?            @relation("ConversationLastMessage", fields: [lastMessageId], references: [id])
  artist        User?               @relation("ConversationArtist", fields: [artistId], references: [id])
  lover         User?               @relation("ConversationLover", fields: [loverId], references: [id])
  intake        ConversationIntake?
  reports       Report[]

  @@unique([artistId, loverId])
  @@index([status])
  @@index([lastMessageAt])
  @@map("conversations")
}

model ConversationUser {
  id             String           @id @default(uuid())
  conversationId String
  userId         String
  joinedAt       DateTime         @default(now())
  lastReadAt     DateTime?
  role           ConversationRole
  unreadCount    Int              @default(0)
  canSend        Boolean          @default(false)
  isMuted        Boolean          @default(false)
  deletedAt      DateTime?
  isHidden       Boolean          @default(false)
  conversation   Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
  @@index([deletedAt])
  @@map("conversation_users")
}

model Message {
  id               String           @id @default(uuid())
  conversationId   String
  senderId         String
  receiverId       String
  content          String
  messageType      MessageType      @default(TEXT)
  mediaUrl         String?
  isRead           Boolean          @default(false)
  replyToMessageId String?
  editedAt         DateTime?
  deletedAt        DateTime?
  intakeFieldKey   String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  conversation     Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  receiver         User             @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender           User             @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  replyTo          Message?         @relation("MessageReplies", fields: [replyToMessageId], references: [id])
  replies          Message[]        @relation("MessageReplies")
  receipts         MessageReceipt[]
  usedAsLastFor    Conversation[]   @relation("ConversationLastMessage")

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@map("messages")
}

model MessageReceipt {
  id        String        @id @default(uuid())
  messageId String
  userId    String
  status    ReceiptStatus @default(DELIVERED)
  createdAt DateTime      @default(now())
  readAt    DateTime?
  message   Message       @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([userId])
  @@index([status])
  @@map("message_receipts")
}

model ConversationIntake {
  id              String       @id @default(uuid())
  conversationId  String       @unique
  schemaVersion   String?
  questions       Json?
  answers         Json
  createdByUserId String
  createdAt       DateTime     @default(now())
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdBy       User         @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)

  @@map("conversation_intakes")
}

model UserFavoriteStyle {
  id      String      @id @default(dbgenerated("uuid_generate_v4()"))
  userId  String
  styleId String
  order   Int         @default(0)
  style   TattooStyle @relation(fields: [styleId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, styleId])
  @@index([userId])
  @@index([styleId])
  @@index([userId, styleId])
  @@map("user_favorite_styles")
}

model ArtistFavoriteStyle {
  id       String        @id @default(dbgenerated("uuid_generate_v4()"))
  artistId String
  styleId  String
  order    Int           @default(0)
  artist   ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)
  style    TattooStyle   @relation(fields: [styleId], references: [id], onDelete: Cascade)

  @@unique([artistId, styleId])
  @@index([artistId])
  @@index([styleId])
  @@index([artistId, styleId])
  @@map("artist_favorite_styles")
}

model BodyPart {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  artists     ArtistBodyPart[]

  @@index([name])
  @@index([isActive])
  @@map("body_parts")
}

model ArtistBodyPart {
  id         String        @id @default(dbgenerated("uuid_generate_v4()"))
  artistId   String
  bodyPartId String
  artist     ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)
  bodyPart   BodyPart      @relation(fields: [bodyPartId], references: [id], onDelete: Cascade)

  @@unique([artistId, bodyPartId])
  @@index([artistId])
  @@index([bodyPartId])
  @@map("artist_body_parts")
}

model PortfolioProject {
  id          String                  @id @default(uuid())
  artistId    String
  title       String?
  description String?
  order       Int                     @default(0)
  isActive    Boolean                 @default(true)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  media       PortfolioProjectMedia[]
  styles      PortfolioProjectStyle[]
  artist      ArtistProfile           @relation(fields: [artistId], references: [id], onDelete: Cascade)
  posts       Post[]

  @@index([artistId])
  @@index([order])
  @@map("portfolio_projects")
}

model PortfolioProjectMedia {
  id        String           @id @default(dbgenerated("uuid_generate_v4()"))
  projectId String
  mediaType MediaType        @default(IMAGE)
  mediaUrl  String
  order     Int              @default(0)
  createdAt DateTime         @default(now())
  project   PortfolioProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([order])
  @@map("portfolio_project_media")
}

model PortfolioProjectStyle {
  id        String           @id @default(dbgenerated("uuid_generate_v4()"))
  projectId String
  styleId   String
  project   PortfolioProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  style     TattooStyle      @relation(fields: [styleId], references: [id], onDelete: Cascade)

  @@unique([projectId, styleId])
  @@index([projectId])
  @@index([styleId])
  @@map("portfolio_project_styles")
}

model Province {
  id              String           @id @default(uuid())
  name            String           @unique
  code            String?          @unique
  country         String           @default("Italy")
  imageUrl        String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  municipalities  Municipality[]
  userLocations   UserLocation[]
  studioLocations StudioLocation[]

  @@index([name])
  @@index([code])
  @@map("provinces")
}

model Municipality {
  id              String           @id @default(uuid())
  name            String
  provinceId      String
  postalCode      String?
  imageUrl        String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  province        Province         @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  userLocations   UserLocation[]
  studioLocations StudioLocation[]

  @@index([name])
  @@index([provinceId])
  @@index([postalCode])
  @@map("municipalities")
}

model TattooStyle {
  id                String                  @id @default(uuid())
  name              String                  @unique
  description       String?
  imageUrl          String?
  isActive          Boolean                 @default(true)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  artistFavorites   ArtistFavoriteStyle[]
  artistMainStyles  ArtistProfile[]         @relation("ArtistMainStyle")
  magazines         Magazine[]
  portfolioProjects PortfolioProjectStyle[]
  posts             Post[]
  services          Service[]
  userFavorites     UserFavoriteStyle[]
  studioStyles      StudioStyle[]

  @@index([name])
  @@index([isActive])
  @@map("tattoo_styles")
}

model Service {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  category    String
  styleId     String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  artists     ArtistService[]
  studios     StudioService[]
  style       TattooStyle?    @relation(fields: [styleId], references: [id])

  @@index([name])
  @@index([category])
  @@index([styleId])
  @@index([isActive])
  @@map("services")
}

model ArtistService {
  id        String        @id @default(dbgenerated("uuid_generate_v4()"))
  artistId  String
  serviceId String
  price     Float?
  duration  Int?
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  artist    ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)
  service   Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([artistId, serviceId])
  @@index([artistId])
  @@index([serviceId])
  @@index([artistId, serviceId])
  @@index([artistId, isActive])
  @@map("artist_services")
}

model ArtistBannerMedia {
  id         String        @id @default(dbgenerated("uuid_generate_v4()"))
  artistId   String
  mediaType  MediaType     @default(IMAGE)
  bannerType BannerType    @default(FOUR_IMAGES)
  mediaUrl   String
  order      Int           @default(0)
  createdAt  DateTime      @default(now())
  artist     ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@index([artistId])
  @@index([order])
  @@map("artist_banner_media")
}

model PostMedia {
  id        String    @id @default(dbgenerated("uuid_generate_v4()"))
  postId    String
  mediaType MediaType @default(IMAGE)
  mediaUrl  String
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([order])
  @@map("post_media")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Notification {
  id         String           @id @default(uuid())
  senderId   String?
  receiverId String
  type       NotificationType
  title      String
  content    String
  data       Json?
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())
  receiver   User             @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User?            @relation("NotificationSender", fields: [senderId], references: [id])

  @@index([receiverId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

model Report {
  id             String        @id @default(uuid())
  reporterId     String
  reportedUserId String
  conversationId String?
  reportType     ReportType    @default(USER)
  reason         String
  status         ReportStatus  @default(PENDING)
  reviewedBy     String?
  reviewNotes    String?
  createdAt      DateTime      @default(now())
  reviewedAt     DateTime?
  reporter       User          @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  reportedUser   User          @relation("UserReported", fields: [reportedUserId], references: [id], onDelete: Cascade)
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull)
  reviewer       User?         @relation("AdminReviews", fields: [reviewedBy], references: [id])

  @@index([reporterId])
  @@index([reportedUserId])
  @@index([status])
  @@index([createdAt])
  @@map("reports")
}

model BlockedUser {
  id        String   @id @default(uuid())
  blockerId String
  blockedId String
  reason    String?
  createdAt DateTime @default(now())
  blocker   User     @relation("UserBlocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User     @relation("UserBlocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
  @@map("blocked_users")
}

model UserLocation {
  id             String       @id @default(uuid())
  userId         String
  provinceId     String
  municipalityId String
  address        String?
  isPrimary      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  province       Province     @relation(fields: [provinceId], references: [id])
  municipality   Municipality @relation(fields: [municipalityId], references: [id])

  @@index([userId])
  @@index([provinceId])
  @@index([municipalityId])
  @@index([isPrimary])
  @@index([userId, provinceId])
  @@map("user_locations")
}

model StudioLocation {
  id             String       @id @default(uuid())
  studioId       String
  provinceId     String
  municipalityId String
  address        String?
  isPrimary      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  studio         Studio       @relation(fields: [studioId], references: [id], onDelete: Cascade)
  province       Province     @relation(fields: [provinceId], references: [id])
  municipality   Municipality @relation(fields: [municipalityId], references: [id])

  @@index([studioId])
  @@index([provinceId])
  @@index([municipalityId])
  @@index([isPrimary])
  @@index([studioId, provinceId])
  @@map("studio_locations")
}

enum UserRole {
  ADMIN
  ARTIST
  TATTOO_LOVER
}

enum AdminLevel {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  SUSPENDED
}

enum BillingCycle {
  MONTHLY
  YEARLY
  ADMIN_ASSIGNED
}

enum StudioRole {
  OWNER
  MANAGER
  MEMBER
}

enum MediaType {
  IMAGE
  VIDEO
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
  SYSTEM
  INTAKE_QUESTION
  INTAKE_ANSWER
}

enum ConversationStatus {
  REQUESTED
  ACTIVE
  REJECTED
  BLOCKED
  CLOSED
}

enum ConversationRole {
  ARTIST
  LOVER
}

enum ReceiptStatus {
  DELIVERED
  READ
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
  MESSAGE
  CONNECTION_REQUEST
  SUBSCRIPTION_EXPIRY
  STUDIO_INVITATION
  SYSTEM
  REPORT_RECEIVED
  REPORT_REVIEWED
  BLOCKED
}

enum ReportType {
  USER
  CONVERSATION
  POST
  COMMENT
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  REJECTED
  DISMISSED
}

enum WorkArrangement {
  STUDIO_OWNER
  STUDIO_EMPLOYEE
  FREELANCE
}

enum ArtistType {
  FREELANCE
  STUDIO_EMPLOYEE
  STUDIO_OWNER
}

enum PlanType {
  PREMIUM
  STUDIO
}

enum BannerType {
  FOUR_IMAGES
  ONE_IMAGE
  ONE_VIDEO
}
